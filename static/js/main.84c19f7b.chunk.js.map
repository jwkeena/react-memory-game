{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Jumbotron/index.js","components/Logo/index.js","App.js","serviceWorker.js","index.js"],"names":["bold","fontWeight","Header","props","react_default","a","createElement","className","style","href","data-toggle","title","data-content","data-placement","id","score","topScore","Footer","target","rel","Jumbotron","maxScoreReached","styles","StyleSheet","create","wobble","animationName","animationDuration","Logo","justLost","concat","css","alt","src","onClick","clickHandler","App","state","logoLinks","clicked","shuffle","j","temp","array","_this","i","length","Math","floor","random","setState","lose","resetLogoLinks","updateTopScore","maxScoreCheck","index","tempLogoLinks","console","log","_this2","this","components_Header","resetGameState","components_Jumbotron","map","logoLink","components_Logo","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84c19f7b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nconst bold = {\r\n    fontWeight: \"bold\"\r\n}\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <nav className=\"navbar fixed-top navbar-expand-lg bg-warning\" style={bold}>\r\n\r\n        <div className=\"collapse navbar-collapse mr-auto\">\r\n            \r\n            <ul className=\"navbar-nav\">\r\n                <li>\r\n                    <a className=\"nav-link\" href=\"#!\" data-toggle=\"popover\" title=\"How to play\" data-content=\"Click any logo to begin. Each logo may only be clicked once. Each unique click earns a point, and each duplicate click resets the game.\" data-placement=\"bottom\">RULES</a>\r\n                </li>\r\n            </ul>\r\n            \r\n            <div className=\"navbar-text ml-auto text-secondary\">\r\n            SCORE: <span id=\"score\">{props.score}</span> | HI SCORE: <span id=\"top-score\">{props.topScore}</span>\r\n            </div>\r\n\r\n        </div>\r\n        </nav>    \r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Footer() {\r\n    return (\r\n    <div className=\"d-flex flex-column\">\r\n    <footer id=\"sticky-footer\" className=\"py-4 bg-dark text-white-50\">\r\n        <div className=\"container text-center\">\r\n        <small>Copyright &copy; <a href=\"http://jwkeena.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">Justin Keena</a></small>\r\n        </div>\r\n    </footer>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                <p className=\"lead\">&nbsp;</p>\r\n                <h1 className = {props.maxScoreReached === true ? \"display-4 holographic\" : \"display-4\"}>{props.maxScoreReached === true ? \"MAX SCORE REACHED!\" : \"TECH STACK MEMORY GAME\"}</h1>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport './style.css';\r\nimport { wobble } from 'react-animations';\r\nimport { StyleSheet, css } from 'aphrodite';\r\n\r\nconst styles = StyleSheet.create({\r\n    wobble: {\r\n      animationName: wobble,\r\n      animationDuration: '1s'\r\n    }\r\n  });\r\n\r\nfunction Logo(props) {\r\n    return(\r\n        <img className={props.justLost ? `${css(styles.wobble)} logo` : \"logo\" } alt=\"logo\" src={props.src} onClick={props.clickHandler}/>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React, { Component } from 'react';\nimport Header from './components/Header/';\nimport Footer from './components/Footer/';\nimport Jumbotron from './components/Jumbotron/';\nimport Logo from './components/Logo/';\nimport './App.css';\n\nclass App extends Component {\n  \n  state = {\n    maxScoreReached: false,\n    justLost: false,\n    score: 0,\n    topScore: 0,\n    logoLinks: [\n      {\n        id: 1,\n        src: \"https://jwkeena.github.io/images/logo-html.png\",\n        clicked: false\n      },\n      {\n        id: 2,\n        src: \"https://jwkeena.github.io/images/logo-postman.png\",\n        clicked: false\n      },\n      {\n        id: 3,\n        src: \"https://jwkeena.github.io/images/logo-firebase.png\",\n        clicked: false\n      },\n      {\n        id: 4,\n        src: \"https://jwkeena.github.io/images/logo-materialize.png\",\n        clicked: false\n      },\n      {\n        id: 5,\n        src: \"https://jwkeena.github.io/images/logo-js.png\",\n        clicked: false\n      },\n      {\n        id: 6,\n        src: \"https://jwkeena.github.io/images/logo-mongodb.png\",\n        clicked: false\n      },\n      {\n        id: 7,\n        src: \"https://jwkeena.github.io/images/logo-node.png\",\n        clicked: false\n      },\n      {\n        id: 8,\n        src: \"https://jwkeena.github.io/images/logo-css.png\",\n        clicked: false\n      },\n      {\n        id: 9,\n        src: \"https://jwkeena.github.io/images/logo-sequelize.png\",\n        clicked: false\n      },\n      {\n        id: 10,\n        src: \"https://jwkeena.github.io/images/logo-jquery.png\",\n        clicked: false\n      },\n      {\n        id: 11,\n        src: \"https://jwkeena.github.io/images/logo-react.png\",\n        clicked: false\n      },\n      {\n        id: 12,\n        src: \"https://jwkeena.github.io/images/logo-bootstrap.png\",\n        clicked: false\n      },\n      {\n        id: 13,\n        src: \"https://jwkeena.github.io/images/logo-bash.png\",\n        clicked: false\n      },\n      {\n        id: 14,\n        src: \"https://jwkeena.github.io/images/logo-mysql.png\",\n        clicked: false\n      },\n      {\n        id: 15,\n        src: \"https://jwkeena.github.io/images/logo-xml.png\",\n        clicked: false\n      }\n    ]\n  }\n\n  shuffle = () => {\n    const array = this.state.logoLinks; // Creating copy of current logoLinks array to not mutate the state directly\n    let i = array.length, j, temp;\n    while(--i > 0) {\n        j = Math.floor(Math.random()* (i+1));\n        temp = array[j];\n        array[j] = array[i];\n        array[i] = temp;\n    };\n    this.setState({\n      logoLinks: array\n    });\n  };\n\n  lose = () => {\n      // Reset all click booleans to false (if they are true), then set score to zero\n      const resetLogoLinks = this.state.logoLinks;\n      for (let i=0; i<15; i++) {\n        if (resetLogoLinks[i].clicked === true) {\n          resetLogoLinks[i].clicked = !resetLogoLinks[i].clicked;\n        }\n      };\n\n      this.setState({\n        score: 0,\n        logoLinks: resetLogoLinks,\n        justLost: true\n      })\n  };\n\n  updateTopScore = () => {\n    if (this.state.score >= this.state.topScore) {\n      this.setState({\n        topScore: this.state.score\n      });\n    };\n  }\n\n  maxScoreCheck = () => {\n    if (this.state.score === 15) {\n      this.setState({\n        maxScoreReached: true\n      });\n    };\n  };\n\n  clickHandler = (index) => {\n    const tempLogoLinks = this.state.logoLinks; // Create copy of entire array\n    \n    if (tempLogoLinks[index].clicked === true) {\n      this.lose();\n      console.log(\"this logo has been clicked already!\");\n\n    } else {\n\n      tempLogoLinks[index].clicked = !tempLogoLinks[index].clicked // Flip boolean at just one point\n      // Replace state with copied and mutated state\n      this.setState({\n        justLost: false,\n        logoLinks: tempLogoLinks,\n        score: this.state.score + 1\n        }, () => { // Must run updateTopScore in a callback because setState is asynchronous\n          this.updateTopScore();\n          this.maxScoreCheck();\n      });\n    };\n\n    this.shuffle();\n  }\n\n  render () {\n    return (\n      <div>\n        <Header\n          resetGameState={this.resetGameState} score={this.state.score} topScore={this.state.topScore}\n        />\n        <Jumbotron maxScoreReached={this.state.maxScoreReached}/>\n        <div className=\"container\">\n          {this.state.logoLinks.map( (logoLink, index) => {\n            return(\n                <Logo justLost={this.state.justLost} src={logoLink.src} key={logoLink.id} shuffle={this.shuffle} logoLinks={this.state.logoLinks} clickHandler={() => this.clickHandler(index)}/> \n                )\n              })}\n        </div>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}